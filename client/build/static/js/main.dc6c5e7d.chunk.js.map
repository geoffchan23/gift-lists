{"version":3,"sources":["Login/Login.js","List/EditInput.js","List/Person.js","List/generateUID.js","List/List.js","GiftLists.js","serviceWorker.js","index.js"],"names":["baseApiUrl","Login","state","selectedSearchObj","undefined","listSearchText","email","lists","showWarning","password","handleListSearchChange","e","_this","setState","target","value","handleAutocompleteSelect","val","item","handleNameChange","handlePasswordChange","getFilteredListsFromServer","_callee","apiUrl","params","response","regenerator_default","a","wrap","_context","prev","next","abrupt","URL","Object","keys","forEach","key","searchParams","append","fetch","sent","json","stop","this","goToList","preventDefault","listInfo","filter","list","name","toLowerCase","length","props","history","push","concat","id","createList","_callee2","data","_context2","createdBy","method","_this$state","react_default","createElement","className","placeholder","onChange","onBlur","autoComplete","type","Autocomplete_default","wrapperProps","inputProps","items","onSelect","renderItem","isHighlighted","style","background","getItemValue","shouldItemRender","indexOf","onClick","disabled","React","Component","withRouter","EditInput","showEditButton","nameInput","focus","_this2","_this$props","children","editMode","handleToggleEditMode","clickToEdit","assign","ref","input","onKeyPress","Fragment","md","Person","_ref","selected","index","editInputField","removePerson","handleEditInput","bringPersonToFront","addGift","handleUpdateGift","removeGift","zIndex","left","src_List_EditInput","hide","map","gift","giftIndex","link","href","generateUID","timestamp","Date","min","max","parts","toString","split","reverse","i","Math","floor","random","generate","List","people","showEnterPassword","errorMsg","componentWillMount","getListInfoFromServer","console","log","location","match","listId","error","msg","indexList","objectSpread","d","p","oldList","toConsumableArray","createPersonCard","person","updateListOnServer","stopPropagation","field","g","_callee3","_context3","headers","Content-Type","body","JSON","stringify","submitPassword","goBack","createdOn","toLocaleString","src_List_Person","GiftLists","BrowserRouter","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_GiftLists_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc6c5e7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AutoComplete from 'react-autocomplete';\r\nimport './Login.scss';\r\nconst baseApiUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:9000' : 'http://192.243.102.90:9000';\r\n\r\nclass Login extends React.Component {\r\n  state = {\r\n    selectedSearchObj: undefined,\r\n    listSearchText: '',\r\n    email: '',\r\n    lists: [],\r\n    showWarning: false,\r\n    password: '',\r\n  }\r\n  handleListSearchChange = (e) => {\r\n    this.setState({\r\n      listSearchText: e.target.value,\r\n    });\r\n  }\r\n  handleAutocompleteSelect = (val, item) => {\r\n    this.setState({\r\n      listSearchText: val,\r\n      selectedSearchObj: item,\r\n    });\r\n  }\r\n  handleNameChange = (e) => {\r\n    this.setState({\r\n      email: e.target.value,\r\n    });\r\n  }\r\n  handlePasswordChange = (e) => {\r\n    this.setState({\r\n      password: e.target.value,\r\n    })\r\n  }\r\n  getFilteredListsFromServer = async () => {\r\n    if (this.state.email === '' || this.state.email === ' ') return;\r\n    const apiUrl = new URL(baseApiUrl + '/api/lists');\r\n    const params = {\r\n      email: this.state.email,\r\n    }\r\n    Object.keys(params).forEach(key => apiUrl.searchParams.append(key, params[key]))\r\n    const response = await fetch(apiUrl);\r\n    const lists = await response.json();\r\n    this.setState({ lists });\r\n  }\r\n  goToList = (e) => {\r\n    e.preventDefault();\r\n    const listInfo = this.state.lists.filter(list => list.name.toLowerCase() === this.state.listSearchText.toLowerCase());\r\n    \r\n    if (listInfo.length) {\r\n      this.props.history.push(`/list/${listInfo[0].id}`, { password: this.state.password });\r\n    } else {\r\n      this.setState({\r\n        showWarning: true\r\n      })\r\n    }\r\n  }\r\n  createList = async (e) => {\r\n    e.preventDefault();\r\n    const apiUrl = new URL(baseApiUrl + '/api/lists');\r\n    const params = {\r\n      name: this.state.listSearchText,\r\n      createdBy: this.state.email,\r\n      password: this.state.password,\r\n    }\r\n    Object.keys(params).forEach(key => apiUrl.searchParams.append(key, params[key]))\r\n\r\n    const response = await fetch(apiUrl, { method: 'POST' });\r\n    const data = await response.json();\r\n    this.props.history.push(`/list/${data.id}`, { password: this.state.password });\r\n  }\r\n  render() {\r\n    const {\r\n      handleListSearchChange,\r\n      handleAutocompleteSelect,\r\n      handleNameChange,\r\n      goToList,\r\n      createList,\r\n      getFilteredListsFromServer,\r\n      handlePasswordChange,\r\n    } = this;\r\n\r\n    const {\r\n      listSearchText,\r\n      email,\r\n      lists,\r\n      showWarning,\r\n      password,\r\n    } = this.state;\r\n\r\n    return (\r\n      <form className='Login'>\r\n        <h1>Gift Lists</h1>\r\n        <p>Create and share gift lists with friends and family</p>\r\n        <input\r\n          placeholder='Enter email'\r\n          value={email}\r\n          onChange={handleNameChange}\r\n          onBlur={getFilteredListsFromServer}\r\n          autoComplete='on'\r\n          type='email'\r\n        />\r\n        <AutoComplete\r\n          wrapperProps={{\r\n            className: 'autocomplete',\r\n          }}\r\n          inputProps={{\r\n            placeholder: 'List name',\r\n          }}\r\n          value={listSearchText}\r\n          items={lists || []}\r\n          onChange={handleListSearchChange}\r\n          onSelect={handleAutocompleteSelect}\r\n          renderItem={(item, isHighlighted) =>\r\n            <div style={{ background: isHighlighted ? 'lightgray' : 'white' }} key={item.id} className='autocomplete-item'>\r\n              {item.name}\r\n            </div>\r\n          }\r\n          getItemValue={(item, a) => item.name }\r\n          shouldItemRender={(item, value) => (item.name.toLowerCase().indexOf(value.toLowerCase()) !== -1)}\r\n        />\r\n        <input\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n          placeholder='Enter a password (optional)'\r\n          type='password'\r\n          className='password'\r\n        />\r\n        {\r\n          showWarning && <span className='warning'>This list does not exist. Click <strong>Create New List</strong> to create it.</span>\r\n        }\r\n        <div className='actions'>\r\n          <button onClick={goToList} disabled={listSearchText === '' || listSearchText === ' '}>\r\n            Go To List\r\n          </button>\r\n          <button onClick={createList} disabled={listSearchText === '' || listSearchText === ' '}>\r\n            Create New List\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);","import React from 'react';\r\nimport { MdEdit } from 'react-icons/md';\r\nimport './EditInput.scss';\r\n\r\nclass EditInput extends React.Component {\r\n  state = {\r\n    showEditButton: true,\r\n  }\r\n  componentDidUpdate() {\r\n    this.nameInput.focus();\r\n  }\r\n  render() {\r\n    const {\r\n      inputProps,\r\n      children,\r\n      editMode,\r\n      handleToggleEditMode,\r\n      className,\r\n      clickToEdit,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className={`EditInput ${className}`}>\r\n        <input\r\n          {...inputProps}\r\n          ref={(input) => { this.nameInput = input; }}\r\n          className={editMode ? 'visible' : 'hidden'}\r\n          onBlur={(e) => handleToggleEditMode(e, true)}\r\n          onKeyPress={(e) => e.key === 'Enter' ? handleToggleEditMode(e, true) : null}\r\n        />\r\n        {\r\n          !editMode && (\r\n            <>\r\n              <div onClick={clickToEdit === false ? null : handleToggleEditMode}>\r\n                { children }\r\n              </div>\r\n              <button\r\n                onClick={() => {\r\n                  handleToggleEditMode();\r\n                }}\r\n                className='edit-btn'\r\n              >\r\n                Edit <MdEdit />\r\n              </button>\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default EditInput;","import React from 'react';\r\nimport { MdClose, MdAdd, MdDeleteForever } from 'react-icons/md';\r\nimport EditInput from './EditInput';\r\nimport './Person.scss';\r\n\r\nconst Person = ({\r\n  id,\r\n  name,\r\n  list,\r\n  selected,\r\n  index,\r\n  editInputField,\r\n  removePerson,\r\n  handleEditInput,\r\n  handleToggleEditMode,\r\n  bringPersonToFront,\r\n  addGift,\r\n  handleUpdateGift,\r\n  removeGift,\r\n}) => (\r\n  <div\r\n    className={['Person' + (selected ? ' selected' : '')]}\r\n    onClick={() => bringPersonToFront(id)}\r\n    style={{\r\n      zIndex: index,\r\n      left: index * 60 + 'px',\r\n    }}\r\n  >\r\n    <EditInput\r\n      editMode={editInputField === 'name'}\r\n      inputProps={{\r\n        value: name,\r\n        placeholder: 'Enter name',\r\n        onChange: (e) => handleEditInput(index, 'name', e),\r\n      }}\r\n      handleToggleEditMode={(e, hide) => handleToggleEditMode(index, hide ? '' : 'name')}\r\n      className='person-edit-name'\r\n    >\r\n      <h3>{ name === '' ? 'Click to enter name' : name }</h3>\r\n    </EditInput>\r\n    <ul>\r\n      {\r\n        list.map((gift, giftIndex) => (\r\n          <li key={gift.id}>\r\n            <div>\r\n\r\n              <EditInput\r\n                editMode={editInputField === gift.id + 'gift.name'}\r\n                inputProps={{\r\n                  value: gift.name,\r\n                  placeholder: 'Enter gift',\r\n                  onChange: (e) => handleUpdateGift(index, gift.id, 'gift.name', e),\r\n                }}\r\n                handleToggleEditMode={(e, hide) => handleToggleEditMode(index, hide ? '' : gift.id + 'gift.name')}\r\n                className='gift-edit-name'\r\n              >\r\n                <h4>{ giftIndex + 1 }) { gift.name === '' ? 'Click to enter name' : gift.name }</h4>\r\n              </EditInput>\r\n\r\n              <EditInput\r\n                editMode={editInputField === gift.id + 'gift.link'}\r\n                inputProps={{\r\n                  value: gift.link,\r\n                  placeholder: 'Enter link',\r\n                  onChange: (e) => handleUpdateGift(index, gift.id, 'gift.link', e),\r\n                }}\r\n                handleToggleEditMode={(e, hide) => handleToggleEditMode(index, hide ? '' : gift.id + 'gift.link')}\r\n                className='gift-edit-input'\r\n                clickToEdit={gift.link === ''}\r\n              >\r\n                {\r\n                   gift.link === '' ?\r\n                    <span>Click to enter link</span> :\r\n                    <>\r\n                      <span className='gift-link-label'>{ gift.link }</span>\r\n                      <a href={gift.link} target='_'>Link</a>\r\n                    </>\r\n                }\r\n               \r\n              </EditInput>\r\n\r\n              <button onClick={() => removeGift(index, gift.id)} className='remove-gift-btn'>\r\n                <MdDeleteForever />\r\n              </button>\r\n            </div>\r\n          </li>\r\n        ))\r\n      }\r\n      <li>\r\n        <button onClick={(e) => addGift(index, e)} className='add-gift-btn'>\r\n          Add Gift <MdAdd />\r\n        </button>\r\n      </li>\r\n    </ul>\r\n    <button onClick={(e) => removePerson(index, e)} className='remove-person-btn'>\r\n      <MdClose />\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Person;","export default function generateUID() {\r\n  let length = 8;\r\n  let timestamp = +new Date();\r\n  \r\n  function _getRandomInt( min, max ) {\r\n   return Math.floor( Math.random() * ( max - min + 1 ) ) + min;\r\n  }\r\n  \r\n  function generate() {\r\n    var ts = timestamp.toString();\r\n    var parts = ts.split( \"\" ).reverse();\r\n    var id = \"\";\r\n    \r\n    for( var i = 0; i < length; ++i ) {\r\n     var index = _getRandomInt( 0, parts.length - 1 );\r\n     id += parts[index];\t \r\n    }\r\n    \r\n    return id;\r\n  }\r\n\r\n  return generate();\r\n}","import React from 'react';\r\nimport './List.scss';\r\nimport Person from './Person';\r\nimport { MdAdd, MdArrowBack } from 'react-icons/md';\r\nimport generateUID from './generateUID';\r\nconst baseApiUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:9000' : 'http://192.243.102.90:9000';\r\n\r\nclass List extends React.Component {\r\n  state = {\r\n    listInfo: {},\r\n    people: [],\r\n    showEnterPassword: false,\r\n    password: undefined,\r\n    errorMsg: null,\r\n  }\r\n  componentWillMount = async () => {\r\n    await this.getListInfoFromServer();\r\n  }\r\n  getListInfoFromServer = async () => {\r\n    console.log('password', this.state.password, this.props.history.location);\r\n    let password = this.state.password;\r\n\r\n    if (this.props.history.location.state) {\r\n      if (this.props.history.location.state.password !== '') {\r\n        password = this.props.history.location.state.password;\r\n      }\r\n    }\r\n\r\n    const response = await fetch(`${baseApiUrl}/api/lists/${this.props.match.params.listId}?password=${password}`);\r\n    const data = await response.json();\r\n\r\n    if (data.error) {\r\n      this.setState({\r\n        showEnterPassword: true,\r\n        errorMsg: data.error === 2 ? data.msg : null,\r\n      })\r\n    } else {\r\n      data.people = data.people.length ? this.indexList(data.people) : [{\r\n        name: '',\r\n        list: [],\r\n        selected: true,\r\n        index: 0,\r\n        editMode: true,\r\n        editInputField: 'name',\r\n        id: generateUID(),\r\n      }];\r\n  \r\n      console.log(data);\r\n      this.setState({ \r\n        listInfo: {\r\n          ...data,\r\n          people: undefined\r\n        },\r\n        people: data.people,\r\n        showEnterPassword: false,\r\n      });\r\n    }\r\n  }\r\n  indexList = (list) => (\r\n    list.map((d, index) => {\r\n      d.index = index;\r\n      d.editInputField = '';\r\n      d.selected = (index === list.length-1);\r\n      d.id = generateUID();\r\n      return d;\r\n    })\r\n  )\r\n  bringPersonToFront = (id) => {\r\n    console.log('bringPersonToFront');\r\n    if (this.state.people.filter(p => p.selected)[0].id === id) return;\r\n    let oldList = [...this.state.people];\r\n    let index = 0;\r\n\r\n    oldList = oldList.map((d) => {\r\n      if (d.id === id) {\r\n        d.index = oldList.length-1;\r\n        d.selected = true;\r\n      } else {\r\n        d.index = index;\r\n        d.selected = false;\r\n        index++\r\n      }\r\n      return d;\r\n    });\r\n\r\n    this.setState({ people: oldList });\r\n  }\r\n  createPersonCard = () => {\r\n    console.log('createPersonCard');\r\n    const people = [ ...this.state.people ];\r\n    if (people.length !== 0) {\r\n      const prevSelectedPerson = people.filter(person => person.selected);\r\n      prevSelectedPerson[0].selected = false;\r\n    }\r\n    people.push({\r\n      name: '',\r\n      list: [],\r\n      selected: true,\r\n      index: people.length,\r\n      editMode: true,\r\n      editInputField: 'name',\r\n      id: generateUID(),\r\n    });\r\n    this.setState({ people });\r\n  }\r\n  removePerson = (index, e) => {\r\n    console.log('removePerson');\r\n    let people = [...this.state.people ].filter(p => p.index !== index);\r\n    people = this.indexList(people);\r\n    this.setState({ people }, () => this.updateListOnServer());\r\n    e.stopPropagation();\r\n  }\r\n  handleToggleEditMode = (index, field) => {\r\n    console.log('handleToggleEditMode', index, field);\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people.map(person => {\r\n          if (person.index === index) {\r\n            person.editInputField = field;\r\n          }\r\n          return person;\r\n        })\r\n      ]\r\n    })\r\n    if (!field || field === '') {\r\n      this.updateListOnServer();\r\n    }\r\n  }\r\n  handleEditInput = (index, field, e) => {\r\n    console.log('handleEditInput', index, field);\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people.map(person => {\r\n          if (person.index === index) {\r\n              person[field] = e.target.value;\r\n          }\r\n          return person;\r\n        })\r\n      ]\r\n    })\r\n  }\r\n  addGift = (index, e) => {\r\n    console.log('addGift', index);\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people.map(person => {\r\n          if (person.index === index) {\r\n            person.list.push({\r\n              id: generateUID(),\r\n              name: '',\r\n              link: '',\r\n            })\r\n          }\r\n          return person;\r\n        })\r\n      ]\r\n    })\r\n    e.stopPropagation(); \r\n  }\r\n  handleUpdateGift = (index, id, field, e) => {\r\n    console.log('handleUpdateGift', index, id, field);\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people.map(person => {\r\n          if (person.index === index) {\r\n            const giftToUpdate = person.list.filter(g => g.id === id)[0];\r\n            giftToUpdate[field.split('.')[1]] = e.target.value;\r\n          }\r\n          return person;\r\n        })\r\n      ]\r\n    })\r\n  }\r\n  removeGift = (index, id) => {\r\n    this.setState({\r\n      people: [\r\n        ...this.state.people.map(person => {\r\n          if (person.index === index) {\r\n            person.list = person.list.filter(g => g.id !== id);\r\n          }\r\n          return person;\r\n        })\r\n      ]\r\n    }, () => this.updateListOnServer())\r\n  }\r\n  updateListOnServer = async () => {\r\n    const params = {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(this.state.people),\r\n    }\r\n    const response = await fetch(`${baseApiUrl}/api/lists/${this.props.match.params.listId}`, params);\r\n    const data = await response.json();\r\n    console.log('response from PATCH', data);\r\n  }\r\n  handlePasswordChange = (e) => {\r\n    this.setState({ password: e.target.value })\r\n  }\r\n  submitPassword = () => {\r\n    this.setState({ errorMsg: null }, () => {\r\n      this.getListInfoFromServer();\r\n    })\r\n  }\r\n  goBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n  render() {\r\n    const {\r\n      listInfo,\r\n      people,\r\n      showEnterPassword,\r\n      password,\r\n      errorMsg,\r\n    } = this.state;\r\n\r\n    const {\r\n      bringPersonToFront,\r\n      createPersonCard,\r\n      removePerson,\r\n      handleToggleEditMode,\r\n      handleEditInput,\r\n      addGift,\r\n      handleUpdateGift,\r\n      removeGift,\r\n      handlePasswordChange,\r\n      submitPassword,\r\n      goBack,\r\n    } = this;\r\n\r\n    return (\r\n      <>\r\n        <button className='back-btn' onClick={goBack}>\r\n          <MdArrowBack />\r\n        </button>\r\n        {showEnterPassword ? (\r\n          <div className='enter-password'>\r\n            {\r\n              errorMsg && <span>{ errorMsg }</span>\r\n            }\r\n            <input\r\n              type='password'\r\n              value={password}\r\n              placeholder='Enter password'\r\n              onChange={handlePasswordChange}\r\n              onKeyPress={(e) => e.key === 'Enter' ? submitPassword() : null}\r\n              className={errorMsg ? 'incorrect' : ''}\r\n            />\r\n            <button onClick={submitPassword}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className='List'>\r\n            <h1>{listInfo.name}</h1>\r\n            <h2>Created by: {listInfo.createdBy} on {new Date(listInfo.createdOn).toLocaleString()}</h2>\r\n\r\n            <div className='people'>\r\n              { \r\n                people && people.map((person) => (\r\n                  <Person \r\n                    key={person.id}\r\n                    {...person}\r\n                    bringPersonToFront={bringPersonToFront}\r\n                    removePerson={removePerson}\r\n                    handleToggleEditMode={handleToggleEditMode}\r\n                    handleEditInput={handleEditInput}\r\n                    addGift={addGift}\r\n                    handleUpdateGift={handleUpdateGift}\r\n                    removeGift={removeGift}\r\n                  />\r\n                ))\r\n              }\r\n              <button onClick={createPersonCard} className='create-person-card-btn'>\r\n                <MdAdd />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Login from './Login/Login';\nimport List from './List/List';\nimport './GiftLists.scss';\n\nclass GiftLists extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"GiftLists\">\n          <Route exact path='/' component={Login} />\n          <Route path='/list/:listId' component={List} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default GiftLists;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftLists from './GiftLists';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GiftLists />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}